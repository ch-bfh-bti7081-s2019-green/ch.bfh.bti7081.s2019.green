variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dhttps.protocols=TLSv1.2 -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-Pproduction --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository

stages:
  - Doc
  - Test
  - Deploy

Doc:PDF:
  image: registry.gitlab.com/severinkaderli/pandoc-docker:latest
  stage: Doc
  script:
    - export GIT_SSL_NO_VERIFY=1
    - git clone https://gitlab.com/severinkaderli/pandoc-latex-templates .latex
    - .latex/build.sh ./doc/diary.md
#   - .latex/build.sh ./doc/task_01/task_01.md
#   - .latex/build.sh ./doc/task_01/task_01_presentation.md beamer
#   - .latex/build.sh ./doc/task_02/task_02.md
#   - .latex/build.sh ./doc/task_02/task_02_presentation.md beamer
#    - .latex/build.sh ./doc/task_03/task_03.md
#    - .latex/build.sh ./doc/task_04/task_04.md
#    - .latex/build.sh ./doc/task_04/task_04_presentation.md beamer
#    - .latex/build.sh ./doc/task_05_06/task_05_06.md
#    - .latex/build.sh ./doc/task_05_06/task_05_06_presentation.md beamer
    - .latex/build.sh ./doc/task_08/task_08.md
    - .latex/build.sh ./doc/task_08/task_08_presentation.md beamer
    - .latex/build.sh ./doc/task_09/task_09.md
    - .latex/build.sh ./doc/task_09/task_09_presentation.md beamer
  artifacts:
    paths:
      - "*.pdf"

Doc:Java:
  image: maven:3-jdk-8-alpine
  stage: Doc
  before_script:
    - apk add --update sshpass openssh-client rsync
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - mvn ${MAVEN_CLI_OPTS} javadoc:javadoc
    - rsync -r target/site/apidocs/ $SSH_USER@$SSH_HOST:/tmp/apidocs
    - ssh $SSH_USER@$SSH_HOST "bash -s" < ./deploy.sh doc
  only:
    - master

Test:Java:
  image: maven:3-jdk-8-alpine
  stage: Test
  script:
    - mvn ${MAVEN_CLI_OPTS} -DrepoToken=$COVERAGE_TOKEN clean test jacoco:report coveralls:report

Deploy:Database:
  image: maven:3-jdk-8-alpine
  stage: Deploy
  before_script:
    - export HIBERNATE_PASSWORD=$HIBERNATE_PASSWORD
  script:
    - mvn ${MAVEN_CLI_OPTS} compile exec:java@seed

Deploy:App:
  image: maven:3-jdk-8-alpine
  stage: Deploy
  before_script:
    - apk add --update sshpass openssh-client
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - mvn ${MAVEN_CLI_OPTS} clean package
    - scp target/*.war $SSH_USER@$SSH_HOST:/tmp/ROOT.war
    - ssh $SSH_USER@$SSH_HOST "bash -s" < ./deploy.sh
  only:
    - master